"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subaccount = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Subaccount extends runtime_1.BaseAPI {
    /**
     * Create Subaccount
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.business_name === null || requestParameters.business_name === undefined) {
                throw new runtime_1.RequiredError('business_name', 'Required parameter business_name was null or undefined when calling create.');
            }
            if (requestParameters.settlement_bank === null || requestParameters.settlement_bank === undefined) {
                throw new runtime_1.RequiredError('settlement_bank', 'Required parameter settlement_bank was null or undefined when calling create.');
            }
            if (requestParameters.account_number === null || requestParameters.account_number === undefined) {
                throw new runtime_1.RequiredError('account_number', 'Required parameter account_number was null or undefined when calling create.');
            }
            if (requestParameters.percentage_charge === null || requestParameters.percentage_charge === undefined) {
                throw new runtime_1.RequiredError('percentage_charge', 'Required parameter percentage_charge was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.business_name !== undefined) {
                formParams['business_name'] = requestParameters.business_name;
            }
            if (requestParameters.settlement_bank !== undefined) {
                formParams['settlement_bank'] = requestParameters.settlement_bank;
            }
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.percentage_charge !== undefined) {
                formParams['percentage_charge'] = requestParameters.percentage_charge;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.primary_contact_email !== undefined) {
                formParams['primary_contact_email'] = requestParameters.primary_contact_email;
            }
            if (requestParameters.primary_contact_name !== undefined) {
                formParams['primary_contact_name'] = requestParameters.primary_contact_name;
            }
            if (requestParameters.primary_contact_phone !== undefined) {
                formParams['primary_contact_phone'] = requestParameters.primary_contact_phone;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            const response = yield this.request({
                path: `/subaccount`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Subaccount
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/subaccount/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Subaccounts
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/subaccount`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Subaccount
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.business_name !== undefined) {
                formParams['business_name'] = requestParameters.business_name;
            }
            if (requestParameters.settlement_bank !== undefined) {
                formParams['settlement_bank'] = requestParameters.settlement_bank;
            }
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.active !== undefined) {
                formParams['active'] = requestParameters.active;
            }
            if (requestParameters.percentage_charge !== undefined) {
                formParams['percentage_charge'] = requestParameters.percentage_charge;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.primary_contact_email !== undefined) {
                formParams['primary_contact_email'] = requestParameters.primary_contact_email;
            }
            if (requestParameters.primary_contact_name !== undefined) {
                formParams['primary_contact_name'] = requestParameters.primary_contact_name;
            }
            if (requestParameters.primary_contact_phone !== undefined) {
                formParams['primary_contact_phone'] = requestParameters.primary_contact_phone;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            const response = yield this.request({
                path: `/subaccount/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Subaccount = Subaccount;
