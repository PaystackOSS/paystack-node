"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Split = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Split extends runtime_1.BaseAPI {
    /**
     * Add Subaccount to Split
     */
    addSubaccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling addSubaccount.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.subaccount !== undefined) {
                formParams['subaccount'] = requestParameters.subaccount;
            }
            if (requestParameters.share !== undefined) {
                formParams['share'] = requestParameters.share;
            }
            const response = yield this.request({
                path: `/split/{id}/subaccount/add`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Split
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime_1.RequiredError('name', 'Required parameter name was null or undefined when calling create.');
            }
            if (requestParameters.type === null || requestParameters.type === undefined) {
                throw new runtime_1.RequiredError('type', 'Required parameter type was null or undefined when calling create.');
            }
            if (requestParameters.subaccounts === null || requestParameters.subaccounts === undefined) {
                throw new runtime_1.RequiredError('subaccounts', 'Required parameter subaccounts was null or undefined when calling create.');
            }
            if (requestParameters.currency === null || requestParameters.currency === undefined) {
                throw new runtime_1.RequiredError('currency', 'Required parameter currency was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.type !== undefined) {
                formParams['type'] = requestParameters.type;
            }
            if (requestParameters.subaccounts) {
                formParams['subaccounts'] = requestParameters.subaccounts;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.bearer_type !== undefined) {
                formParams['bearer_type'] = requestParameters.bearer_type;
            }
            if (requestParameters.bearer_subaccount !== undefined) {
                formParams['bearer_subaccount'] = requestParameters.bearer_subaccount;
            }
            const response = yield this.request({
                path: `/split`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Split
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/split/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List/Search Splits
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.active !== undefined) {
                queryParameters['active'] = requestParameters.active;
            }
            if (requestParameters.sort_by !== undefined) {
                queryParameters['sort_by'] = requestParameters.sort_by;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from;
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to;
            }
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            const response = yield this.request({
                path: `/split`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Remove Subaccount from split
     */
    removeSubaccount(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling removeSubaccount.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.subaccount !== undefined) {
                formParams['subaccount'] = requestParameters.subaccount;
            }
            if (requestParameters.share !== undefined) {
                formParams['share'] = requestParameters.share;
            }
            const response = yield this.request({
                path: `/split/{id}/subaccount/remove`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Split
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.active !== undefined) {
                formParams['active'] = requestParameters.active;
            }
            if (requestParameters.bearer_type !== undefined) {
                formParams['bearer_type'] = requestParameters.bearer_type;
            }
            if (requestParameters.bearer_subaccount !== undefined) {
                formParams['bearer_subaccount'] = requestParameters.bearer_subaccount;
            }
            const response = yield this.request({
                path: `/split/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Split = Split;
