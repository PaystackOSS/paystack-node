"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Subscription extends runtime_1.BaseAPI {
    /**
     * Create Subscription
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customer === null || requestParameters.customer === undefined) {
                throw new runtime_1.RequiredError('customer', 'Required parameter customer was null or undefined when calling create.');
            }
            if (requestParameters.plan === null || requestParameters.plan === undefined) {
                throw new runtime_1.RequiredError('plan', 'Required parameter plan was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer !== undefined) {
                formParams['customer'] = requestParameters.customer;
            }
            if (requestParameters.plan !== undefined) {
                formParams['plan'] = requestParameters.plan;
            }
            if (requestParameters.authorization !== undefined) {
                formParams['authorization'] = requestParameters.authorization;
            }
            if (requestParameters.start_date !== undefined) {
                formParams['start_date'] = requestParameters.start_date;
            }
            const response = yield this.request({
                path: `/subscription`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Disable Subscription
     */
    disable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling disable.');
            }
            if (requestParameters.token === null || requestParameters.token === undefined) {
                throw new runtime_1.RequiredError('token', 'Required parameter token was null or undefined when calling disable.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.code !== undefined) {
                formParams['code'] = requestParameters.code;
            }
            if (requestParameters.token !== undefined) {
                formParams['token'] = requestParameters.token;
            }
            const response = yield this.request({
                path: `/subscription/disable`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Enable Subscription
     */
    enable(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling enable.');
            }
            if (requestParameters.token === null || requestParameters.token === undefined) {
                throw new runtime_1.RequiredError('token', 'Required parameter token was null or undefined when calling enable.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.code !== undefined) {
                formParams['code'] = requestParameters.code;
            }
            if (requestParameters.token !== undefined) {
                formParams['token'] = requestParameters.token;
            }
            const response = yield this.request({
                path: `/subscription/enable`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Subscription
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/subscription/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Subscriptions
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.plan !== undefined) {
                queryParameters['plan'] = requestParameters.plan;
            }
            if (requestParameters.customer !== undefined) {
                queryParameters['customer'] = requestParameters.customer;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/subscription`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Send Update Subscription Link
     */
    manageEmail(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling manageEmail.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/subscription/{code}/manage/email`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Generate Update Subscription Link
     */
    manageLink(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling manageLink.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/subscription/{code}/manage/link`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Subscription = Subscription;
