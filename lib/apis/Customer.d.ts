/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BaseAPI } from '../runtime';
import { Response } from '../models';
export interface CreateRequest {
    email: string;
    first_name?: string;
    last_name?: string;
    phone?: string;
    metadata?: string;
}
export interface DeactivateAuthorizationRequest {
    authorization_code: string;
}
export interface FetchRequest {
    code: string;
}
export interface ListRequest {
    use_cursor?: boolean;
    next?: string;
    previous?: string;
    from?: string;
    to?: string;
    perPage?: string;
    page?: string;
}
export interface RiskActionRequest {
    customer: string;
    risk_action?: string;
}
export interface UpdateRequest {
    code: string;
    first_name?: string;
    last_name?: string;
    phone?: string;
    metadata?: string;
}
export interface ValidatteRequest {
    code: string;
    first_name: string;
    last_name: string;
    type: string;
    country: string;
    bvn: string;
    bank_code: string;
    account_number: string;
    value?: string;
}
/**
 *
 */
export declare class Customer extends BaseAPI {
    /**
     * Create Customer
     */
    create(requestParameters: CreateRequest): Promise<Response>;
    /**
     * Deactivate a customer\'s card
     * Deactivate Authorization
     */
    deactivateAuthorization(requestParameters: DeactivateAuthorizationRequest): Promise<Response>;
    /**
     * Fetch Customer
     */
    fetch(requestParameters: FetchRequest): Promise<Response>;
    /**
     * List customers on your integration
     * List Customers
     */
    list(requestParameters: ListRequest): Promise<Response>;
    /**
     * Set customer\'s risk action by whitelisting or blacklisting the customer
     * White/blacklist Customer
     */
    riskAction(requestParameters: RiskActionRequest): Promise<Response>;
    /**
     * Update Customer
     */
    update(requestParameters: UpdateRequest): Promise<Response>;
    /**
     * Validate a customer\'s identity
     * Validate Customer
     */
    validatte(requestParameters: ValidatteRequest): Promise<Response>;
}
