/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { BaseAPI, RequiredError } from '../runtime';
import {
    Response,
    ResponseFromJSON
} from '../models';

export interface AddProductsRequest {
    id: string;
    product: Array<string>;
}

export interface CheckSlugAvailabilityRequest {
    slug: string;
}

export interface CreateRequest {
    name: string;
    description?: string;
    amount?: number;
    slug?: string;
    metadata?: string;
    redirect_url?: string;
    custom_fields?: Array<object>;
}

export interface FetchRequest {
    id: string;
}

export interface ListRequest {
    perPage?: number;
    page?: number;
    from?: Date;
    to?: Date;
}

export interface UpdateRequest {
    id: string;
    name?: string;
    description?: string;
    amount?: number;
    active?: boolean;
}

/**
 * 
 */
export class Page extends BaseAPI {

    /**
     * Add Products
     */
    async addProducts(requestParameters: AddProductsRequest): Promise<Response> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling addProducts.');
        }
        if (requestParameters.product === null || requestParameters.product === undefined) {
            throw new RequiredError('product','Required parameter product was null or undefined when calling addProducts.');
        }
        const queryParameters: any = {};

        let formParams: any = {};

        if (requestParameters.product) {
            formParams['product'] = requestParameters.product;
        }


        const response = await this.request({
            path: `/page/{id}/product`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            query: queryParameters,
            body: formParams,
        });
        
        return ResponseFromJSON(response);
    }

    /**
     * Check Slug Availability
     */
    async checkSlugAvailability(requestParameters: CheckSlugAvailabilityRequest): Promise<Response> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new RequiredError('slug','Required parameter slug was null or undefined when calling checkSlugAvailability.');
        }
        const queryParameters: any = {};


        const response = await this.request({
            path: `/page/check_slug_availability/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            query: queryParameters,
        });
        
        return ResponseFromJSON(response);
    }

    /**
     * Create Page
     */
    async create(requestParameters: CreateRequest): Promise<Response> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new RequiredError('name','Required parameter name was null or undefined when calling create.');
        }
        const queryParameters: any = {};

        let formParams: any = {};

        if (requestParameters.name !== undefined) {
            formParams['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            formParams['description'] = requestParameters.description;
        }

        if (requestParameters.amount !== undefined) {
            formParams['amount'] = requestParameters.amount;
        }

        if (requestParameters.slug !== undefined) {
            formParams['slug'] = requestParameters.slug;
        }

        if (requestParameters.metadata !== undefined) {
            formParams['metadata'] = requestParameters.metadata;
        }

        if (requestParameters.redirect_url !== undefined) {
            formParams['redirect_url'] = requestParameters.redirect_url;
        }

        if (requestParameters.custom_fields) {
            formParams['custom_fields'] = requestParameters.custom_fields;
        }


        const response = await this.request({
            path: `/page`,
            method: 'POST',
            query: queryParameters,
            body: formParams,
        });
        
        return ResponseFromJSON(response);
    }

    /**
     * Fetch Page
     */
    async fetch(requestParameters: FetchRequest): Promise<Response> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling fetch.');
        }
        const queryParameters: any = {};


        const response = await this.request({
            path: `/page/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            query: queryParameters,
        });
        
        return ResponseFromJSON(response);
    }

    /**
     * List Pages
     */
    async list(requestParameters: ListRequest): Promise<Response> {
        const queryParameters: any = {};

        if (requestParameters.perPage !== undefined) {
            queryParameters['perPage'] = requestParameters.perPage;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }


        const response = await this.request({
            path: `/page`,
            method: 'GET',
            query: queryParameters,
        });
        
        return ResponseFromJSON(response);
    }

    /**
     * Update Page
     */
    async update(requestParameters: UpdateRequest): Promise<Response> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new RequiredError('id','Required parameter id was null or undefined when calling update.');
        }
        const queryParameters: any = {};

        let formParams: any = {};

        if (requestParameters.name !== undefined) {
            formParams['name'] = requestParameters.name;
        }

        if (requestParameters.description !== undefined) {
            formParams['description'] = requestParameters.description;
        }

        if (requestParameters.amount !== undefined) {
            formParams['amount'] = requestParameters.amount;
        }

        if (requestParameters.active !== undefined) {
            formParams['active'] = requestParameters.active;
        }


        const response = await this.request({
            path: `/page/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            query: queryParameters,
            body: formParams,
        });
        
        return ResponseFromJSON(response);
    }

}
