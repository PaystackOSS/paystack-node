"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentRequest = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class PaymentRequest extends runtime_1.BaseAPI {
    /**
     * Archive Payment Request
     */
    archive(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling archive.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/archive/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Payment Request
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customer === null || requestParameters.customer === undefined) {
                throw new runtime_1.RequiredError('customer', 'Required parameter customer was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer !== undefined) {
                formParams['customer'] = requestParameters.customer;
            }
            if (requestParameters.amount !== undefined) {
                formParams['amount'] = requestParameters.amount;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.due_date !== undefined) {
                formParams['due_date'] = requestParameters.due_date;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.line_items) {
                formParams['line_items'] = requestParameters.line_items;
            }
            if (requestParameters.tax) {
                formParams['tax'] = requestParameters.tax;
            }
            if (requestParameters.send_notification) {
                formParams['send_notification'] = requestParameters.send_notification;
            }
            if (requestParameters.draft) {
                formParams['draft'] = requestParameters.draft;
            }
            if (requestParameters.has_invoice) {
                formParams['has_invoice'] = requestParameters.has_invoice;
            }
            if (requestParameters.invoice_number !== undefined) {
                formParams['invoice_number'] = requestParameters.invoice_number;
            }
            if (requestParameters.split_code !== undefined) {
                formParams['split_code'] = requestParameters.split_code;
            }
            const response = yield this.request({
                path: `/paymentrequest`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Payment Request
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Finalize Payment Request
     */
    finalize(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling finalize.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/finalize/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Payment Request
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.customer !== undefined) {
                queryParameters['customer'] = requestParameters.customer;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/paymentrequest`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Send Notification
     */
    notify(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling notify.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/notify/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Payment Request Total
     */
    totals() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/totals`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Payment Request
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer !== undefined) {
                formParams['customer'] = requestParameters.customer;
            }
            if (requestParameters.amount !== undefined) {
                formParams['amount'] = requestParameters.amount;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.due_date !== undefined) {
                formParams['due_date'] = requestParameters.due_date;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.line_items) {
                formParams['line_items'] = requestParameters.line_items;
            }
            if (requestParameters.tax) {
                formParams['tax'] = requestParameters.tax;
            }
            if (requestParameters.send_notification) {
                formParams['send_notification'] = requestParameters.send_notification;
            }
            if (requestParameters.draft) {
                formParams['draft'] = requestParameters.draft;
            }
            if (requestParameters.has_invoice) {
                formParams['has_invoice'] = requestParameters.has_invoice;
            }
            if (requestParameters.invoice_number !== undefined) {
                formParams['invoice_number'] = requestParameters.invoice_number;
            }
            if (requestParameters.split_code !== undefined) {
                formParams['split_code'] = requestParameters.split_code;
            }
            const response = yield this.request({
                path: `/paymentrequest/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Verify Payment Request
     */
    verify(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling verify.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/paymentrequest/verify/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.PaymentRequest = PaymentRequest;
