"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verification = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Verification extends runtime_1.BaseAPI {
    /**
     * List States (AVS)
     */
    avs(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.type !== undefined) {
                queryParameters['type'] = requestParameters.type;
            }
            if (requestParameters.country !== undefined) {
                queryParameters['country'] = requestParameters.country;
            }
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            const response = yield this.request({
                path: `/address_verification/states`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Banks
     */
    fetchBanks(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.country !== undefined) {
                queryParameters['country'] = requestParameters.country;
            }
            if (requestParameters.pay_with_bank_transfer !== undefined) {
                queryParameters['pay_with_bank_transfer'] = requestParameters.pay_with_bank_transfer;
            }
            if (requestParameters.use_cursor !== undefined) {
                queryParameters['use_cursor'] = requestParameters.use_cursor;
            }
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.next !== undefined) {
                queryParameters['next'] = requestParameters.next;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            if (requestParameters.gateway !== undefined) {
                queryParameters['gateway'] = requestParameters.gateway;
            }
            const response = yield this.request({
                path: `/bank`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Countries
     */
    listCountries() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const response = yield this.request({
                path: `/country`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Resolve Account Number
     */
    resolveAccountNumber(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.account_number !== undefined) {
                queryParameters['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.bank_code !== undefined) {
                queryParameters['bank_code'] = requestParameters.bank_code;
            }
            const response = yield this.request({
                path: `/bank/resolve`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Resolve Card BIN
     */
    resolveCardBin(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bin === null || requestParameters.bin === undefined) {
                throw new runtime_1.RequiredError('bin', 'Required parameter bin was null or undefined when calling resolveCardBin.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/decision/bin/{bin}`.replace(`{${"bin"}}`, encodeURIComponent(String(requestParameters.bin))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Verification = Verification;
