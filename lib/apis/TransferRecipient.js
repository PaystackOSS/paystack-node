"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferRecipient = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class TransferRecipient extends runtime_1.BaseAPI {
    /**
     * Bulk Create Transfer Recipient
     */
    bulk(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.batch === null || requestParameters.batch === undefined) {
                throw new runtime_1.RequiredError('batch', 'Required parameter batch was null or undefined when calling bulk.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.batch) {
                formParams['batch'] = requestParameters.batch;
            }
            const response = yield this.request({
                path: `/transferrecipient/bulk`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Transfer Recipient
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.type === null || requestParameters.type === undefined) {
                throw new runtime_1.RequiredError('type', 'Required parameter type was null or undefined when calling create.');
            }
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime_1.RequiredError('name', 'Required parameter name was null or undefined when calling create.');
            }
            if (requestParameters.account_number === null || requestParameters.account_number === undefined) {
                throw new runtime_1.RequiredError('account_number', 'Required parameter account_number was null or undefined when calling create.');
            }
            if (requestParameters.bank_code === null || requestParameters.bank_code === undefined) {
                throw new runtime_1.RequiredError('bank_code', 'Required parameter bank_code was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.type !== undefined) {
                formParams['type'] = requestParameters.type;
            }
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.bank_code !== undefined) {
                formParams['bank_code'] = requestParameters.bank_code;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.authorization_code !== undefined) {
                formParams['authorization_code'] = requestParameters.authorization_code;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            const response = yield this.request({
                path: `/transferrecipient`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Transfer recipient
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/transferrecipient/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Transfer Recipients
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/transferrecipient`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Delete Transfer Recipient
     */
    transferrecipientCodeDelete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling transferrecipientCodeDelete.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/transferrecipient/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'DELETE',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Transfer recipient
     */
    transferrecipientCodePut(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling transferrecipientCodePut.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.email !== undefined) {
                formParams['email'] = requestParameters.email;
            }
            const response = yield this.request({
                path: `/transferrecipient/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.TransferRecipient = TransferRecipient;
