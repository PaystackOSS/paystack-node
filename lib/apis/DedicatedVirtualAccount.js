"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DedicatedVirtualAccount = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class DedicatedVirtualAccount extends runtime_1.BaseAPI {
    /**
     * Split Dedicated Account Transaction
     */
    addSplit(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account_number === null || requestParameters.account_number === undefined) {
                throw new runtime_1.RequiredError('account_number', 'Required parameter account_number was null or undefined when calling addSplit.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.subaccount !== undefined) {
                formParams['subaccount'] = requestParameters.subaccount;
            }
            if (requestParameters.split_code !== undefined) {
                formParams['split_code'] = requestParameters.split_code;
            }
            const response = yield this.request({
                path: `/dedicated_account/split`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Bank Providers
     */
    availableProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const response = yield this.request({
                path: `/dedicated_account/available_providers`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Dedicated Account
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customer === null || requestParameters.customer === undefined) {
                throw new runtime_1.RequiredError('customer', 'Required parameter customer was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer !== undefined) {
                formParams['customer'] = requestParameters.customer;
            }
            if (requestParameters.preferred_bank !== undefined) {
                formParams['preferred_bank'] = requestParameters.preferred_bank;
            }
            if (requestParameters.subaccount !== undefined) {
                formParams['subaccount'] = requestParameters.subaccount;
            }
            if (requestParameters.split_code !== undefined) {
                formParams['split_code'] = requestParameters.split_code;
            }
            const response = yield this.request({
                path: `/dedicated_account`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Deactivate Dedicated Account
     */
    deactivate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account_id === null || requestParameters.account_id === undefined) {
                throw new runtime_1.RequiredError('account_id', 'Required parameter account_id was null or undefined when calling deactivate.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/dedicated_account/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.account_id))),
                method: 'DELETE',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Dedicated Account
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account_id === null || requestParameters.account_id === undefined) {
                throw new runtime_1.RequiredError('account_id', 'Required parameter account_id was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/dedicated_account/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.account_id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Dedicated Accounts
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.account_number !== undefined) {
                queryParameters['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.customer !== undefined) {
                queryParameters['customer'] = requestParameters.customer;
            }
            if (requestParameters.active !== undefined) {
                queryParameters['active'] = requestParameters.active;
            }
            if (requestParameters.currency !== undefined) {
                queryParameters['currency'] = requestParameters.currency;
            }
            if (requestParameters.provider_slug !== undefined) {
                queryParameters['provider_slug'] = requestParameters.provider_slug;
            }
            if (requestParameters.bank_id !== undefined) {
                queryParameters['bank_id'] = requestParameters.bank_id;
            }
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            const response = yield this.request({
                path: `/dedicated_account`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Remove Split from Dedicated Account
     */
    removeSplit(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account_number === null || requestParameters.account_number === undefined) {
                throw new runtime_1.RequiredError('account_number', 'Required parameter account_number was null or undefined when calling removeSplit.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.subaccount !== undefined) {
                formParams['subaccount'] = requestParameters.subaccount;
            }
            if (requestParameters.split_code !== undefined) {
                formParams['split_code'] = requestParameters.split_code;
            }
            const response = yield this.request({
                path: `/dedicated_account/split`,
                method: 'DELETE',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.DedicatedVirtualAccount = DedicatedVirtualAccount;
