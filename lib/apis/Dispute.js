"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dispute = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Dispute extends runtime_1.BaseAPI {
    /**
     * Export Disputes
     */
    download(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/dispute/export`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Add Evidence
     */
    evidence(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling evidence.');
            }
            if (requestParameters.customer_email === null || requestParameters.customer_email === undefined) {
                throw new runtime_1.RequiredError('customer_email', 'Required parameter customer_email was null or undefined when calling evidence.');
            }
            if (requestParameters.customer_name === null || requestParameters.customer_name === undefined) {
                throw new runtime_1.RequiredError('customer_name', 'Required parameter customer_name was null or undefined when calling evidence.');
            }
            if (requestParameters.customer_phone === null || requestParameters.customer_phone === undefined) {
                throw new runtime_1.RequiredError('customer_phone', 'Required parameter customer_phone was null or undefined when calling evidence.');
            }
            if (requestParameters.service_details === null || requestParameters.service_details === undefined) {
                throw new runtime_1.RequiredError('service_details', 'Required parameter service_details was null or undefined when calling evidence.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer_email !== undefined) {
                formParams['customer_email'] = requestParameters.customer_email;
            }
            if (requestParameters.customer_name !== undefined) {
                formParams['customer_name'] = requestParameters.customer_name;
            }
            if (requestParameters.customer_phone !== undefined) {
                formParams['customer_phone'] = requestParameters.customer_phone;
            }
            if (requestParameters.service_details !== undefined) {
                formParams['service_details'] = requestParameters.service_details;
            }
            if (requestParameters.delivery_address !== undefined) {
                formParams['delivery_address'] = requestParameters.delivery_address;
            }
            if (requestParameters.delivery_date !== undefined) {
                formParams['delivery_date'] = requestParameters.delivery_date;
            }
            const response = yield this.request({
                path: `/dispute/{id}/evidence`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Dispute
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/dispute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Disputes
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.transaction !== undefined) {
                queryParameters['transaction'] = requestParameters.transaction;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/dispute`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Resolve a Dispute
     */
    resolve(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling resolve.');
            }
            if (requestParameters.resolution === null || requestParameters.resolution === undefined) {
                throw new runtime_1.RequiredError('resolution', 'Required parameter resolution was null or undefined when calling resolve.');
            }
            if (requestParameters.message === null || requestParameters.message === undefined) {
                throw new runtime_1.RequiredError('message', 'Required parameter message was null or undefined when calling resolve.');
            }
            if (requestParameters.refund_amount === null || requestParameters.refund_amount === undefined) {
                throw new runtime_1.RequiredError('refund_amount', 'Required parameter refund_amount was null or undefined when calling resolve.');
            }
            if (requestParameters.uploaded_filename === null || requestParameters.uploaded_filename === undefined) {
                throw new runtime_1.RequiredError('uploaded_filename', 'Required parameter uploaded_filename was null or undefined when calling resolve.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.resolution !== undefined) {
                formParams['resolution'] = requestParameters.resolution;
            }
            if (requestParameters.message !== undefined) {
                formParams['message'] = requestParameters.message;
            }
            if (requestParameters.refund_amount !== undefined) {
                formParams['refund_amount'] = requestParameters.refund_amount;
            }
            if (requestParameters.uploaded_filename !== undefined) {
                formParams['uploaded_filename'] = requestParameters.uploaded_filename;
            }
            if (requestParameters.evidence !== undefined) {
                formParams['evidence'] = requestParameters.evidence;
            }
            const response = yield this.request({
                path: `/dispute/{id}/resolve`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Transaction Disputes
     */
    transaction(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling transaction.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/dispute/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Dispute
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling update.');
            }
            if (requestParameters.refund_amount === null || requestParameters.refund_amount === undefined) {
                throw new runtime_1.RequiredError('refund_amount', 'Required parameter refund_amount was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.refund_amount !== undefined) {
                formParams['refund_amount'] = requestParameters.refund_amount;
            }
            if (requestParameters.uploaded_filename !== undefined) {
                formParams['uploaded_filename'] = requestParameters.uploaded_filename;
            }
            const response = yield this.request({
                path: `/dispute/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Get Upload URL
     */
    uploadUrl(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling uploadUrl.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/dispute/{id}/upload_url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Dispute = Dispute;
