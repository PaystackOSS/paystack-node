"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customer = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Customer extends runtime_1.BaseAPI {
    /**
     * Create Customer
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.email === null || requestParameters.email === undefined) {
                throw new runtime_1.RequiredError('email', 'Required parameter email was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.email !== undefined) {
                formParams['email'] = requestParameters.email;
            }
            if (requestParameters.first_name !== undefined) {
                formParams['first_name'] = requestParameters.first_name;
            }
            if (requestParameters.last_name !== undefined) {
                formParams['last_name'] = requestParameters.last_name;
            }
            if (requestParameters.phone !== undefined) {
                formParams['phone'] = requestParameters.phone;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            const response = yield this.request({
                path: `/customer`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Deactivate a customer\'s card
     * Deactivate Authorization
     */
    deactivateAuthorization(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.authorization_code === null || requestParameters.authorization_code === undefined) {
                throw new runtime_1.RequiredError('authorization_code', 'Required parameter authorization_code was null or undefined when calling deactivateAuthorization.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.authorization_code !== undefined) {
                formParams['authorization_code'] = requestParameters.authorization_code;
            }
            const response = yield this.request({
                path: `/customer/deactivate_authorization`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Customer
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/customer/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List customers on your integration
     * List Customers
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.use_cursor !== undefined) {
                queryParameters['use_cursor'] = requestParameters.use_cursor;
            }
            if (requestParameters.next !== undefined) {
                queryParameters['next'] = requestParameters.next;
            }
            if (requestParameters.previous !== undefined) {
                queryParameters['previous'] = requestParameters.previous;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from;
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to;
            }
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            const response = yield this.request({
                path: `/customer`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Set customer\'s risk action by whitelisting or blacklisting the customer
     * White/blacklist Customer
     */
    riskAction(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.customer === null || requestParameters.customer === undefined) {
                throw new runtime_1.RequiredError('customer', 'Required parameter customer was null or undefined when calling riskAction.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.customer !== undefined) {
                formParams['customer'] = requestParameters.customer;
            }
            if (requestParameters.risk_action !== undefined) {
                formParams['risk_action'] = requestParameters.risk_action;
            }
            const response = yield this.request({
                path: `/customer/set_risk_action`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update Customer
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.first_name !== undefined) {
                formParams['first_name'] = requestParameters.first_name;
            }
            if (requestParameters.last_name !== undefined) {
                formParams['last_name'] = requestParameters.last_name;
            }
            if (requestParameters.phone !== undefined) {
                formParams['phone'] = requestParameters.phone;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            const response = yield this.request({
                path: `/customer/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Validate a customer\'s identity
     * Validate Customer
     */
    validatte(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling validatte.');
            }
            if (requestParameters.first_name === null || requestParameters.first_name === undefined) {
                throw new runtime_1.RequiredError('first_name', 'Required parameter first_name was null or undefined when calling validatte.');
            }
            if (requestParameters.last_name === null || requestParameters.last_name === undefined) {
                throw new runtime_1.RequiredError('last_name', 'Required parameter last_name was null or undefined when calling validatte.');
            }
            if (requestParameters.type === null || requestParameters.type === undefined) {
                throw new runtime_1.RequiredError('type', 'Required parameter type was null or undefined when calling validatte.');
            }
            if (requestParameters.country === null || requestParameters.country === undefined) {
                throw new runtime_1.RequiredError('country', 'Required parameter country was null or undefined when calling validatte.');
            }
            if (requestParameters.bvn === null || requestParameters.bvn === undefined) {
                throw new runtime_1.RequiredError('bvn', 'Required parameter bvn was null or undefined when calling validatte.');
            }
            if (requestParameters.bank_code === null || requestParameters.bank_code === undefined) {
                throw new runtime_1.RequiredError('bank_code', 'Required parameter bank_code was null or undefined when calling validatte.');
            }
            if (requestParameters.account_number === null || requestParameters.account_number === undefined) {
                throw new runtime_1.RequiredError('account_number', 'Required parameter account_number was null or undefined when calling validatte.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.first_name !== undefined) {
                formParams['first_name'] = requestParameters.first_name;
            }
            if (requestParameters.last_name !== undefined) {
                formParams['last_name'] = requestParameters.last_name;
            }
            if (requestParameters.type !== undefined) {
                formParams['type'] = requestParameters.type;
            }
            if (requestParameters.country !== undefined) {
                formParams['country'] = requestParameters.country;
            }
            if (requestParameters.bvn !== undefined) {
                formParams['bvn'] = requestParameters.bvn;
            }
            if (requestParameters.bank_code !== undefined) {
                formParams['bank_code'] = requestParameters.bank_code;
            }
            if (requestParameters.account_number !== undefined) {
                formParams['account_number'] = requestParameters.account_number;
            }
            if (requestParameters.value !== undefined) {
                formParams['value'] = requestParameters.value;
            }
            const response = yield this.request({
                path: `/customer/{code}/identification`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Customer = Customer;
