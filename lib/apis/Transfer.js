"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transfer = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Transfer extends runtime_1.BaseAPI {
    /**
     * Initiate Bulk Transfer
     */
    bulk(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.source !== undefined) {
                formParams['source'] = requestParameters.source;
            }
            if (requestParameters.transfers) {
                formParams['transfers'] = requestParameters.transfers;
            }
            const response = yield this.request({
                path: `/transfer/bulk`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Disable OTP requirement for Transfers
     */
    disableOtp() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const response = yield this.request({
                path: `/transfer/disable_otp`,
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Finalize Disabling of OTP requirement for Transfers
     */
    disableOtpFinalize(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.otp === null || requestParameters.otp === undefined) {
                throw new runtime_1.RequiredError('otp', 'Required parameter otp was null or undefined when calling disableOtpFinalize.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.otp !== undefined) {
                formParams['otp'] = requestParameters.otp;
            }
            const response = yield this.request({
                path: `/transfer/disable_otp_finalize`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Export Transfers
     */
    download(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/transfer/export`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Enable OTP requirement for Transfers
     */
    enableOtp() {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const response = yield this.request({
                path: `/transfer/enable_otp`,
                method: 'POST',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Transfer
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.code === null || requestParameters.code === undefined) {
                throw new runtime_1.RequiredError('code', 'Required parameter code was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/transfer/{code}`.replace(`{${"code"}}`, encodeURIComponent(String(requestParameters.code))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Finalize Transfer
     */
    finalize(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transfer_code === null || requestParameters.transfer_code === undefined) {
                throw new runtime_1.RequiredError('transfer_code', 'Required parameter transfer_code was null or undefined when calling finalize.');
            }
            if (requestParameters.otp === null || requestParameters.otp === undefined) {
                throw new runtime_1.RequiredError('otp', 'Required parameter otp was null or undefined when calling finalize.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.transfer_code !== undefined) {
                formParams['transfer_code'] = requestParameters.transfer_code;
            }
            if (requestParameters.otp !== undefined) {
                formParams['otp'] = requestParameters.otp;
            }
            const response = yield this.request({
                path: `/transfer/finalize_transfer`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Initiate Transfer
     */
    initiate(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.source === null || requestParameters.source === undefined) {
                throw new runtime_1.RequiredError('source', 'Required parameter source was null or undefined when calling initiate.');
            }
            if (requestParameters.amount === null || requestParameters.amount === undefined) {
                throw new runtime_1.RequiredError('amount', 'Required parameter amount was null or undefined when calling initiate.');
            }
            if (requestParameters.recipient === null || requestParameters.recipient === undefined) {
                throw new runtime_1.RequiredError('recipient', 'Required parameter recipient was null or undefined when calling initiate.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.source !== undefined) {
                formParams['source'] = requestParameters.source;
            }
            if (requestParameters.amount !== undefined) {
                formParams['amount'] = requestParameters.amount;
            }
            if (requestParameters.recipient !== undefined) {
                formParams['recipient'] = requestParameters.recipient;
            }
            if (requestParameters.reason !== undefined) {
                formParams['reason'] = requestParameters.reason;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/transfer`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Transfers
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/transfer`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Resend OTP for Transfer
     */
    resendOtp(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transfer_code === null || requestParameters.transfer_code === undefined) {
                throw new runtime_1.RequiredError('transfer_code', 'Required parameter transfer_code was null or undefined when calling resendOtp.');
            }
            if (requestParameters.reason === null || requestParameters.reason === undefined) {
                throw new runtime_1.RequiredError('reason', 'Required parameter reason was null or undefined when calling resendOtp.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.transfer_code !== undefined) {
                formParams['transfer_code'] = requestParameters.transfer_code;
            }
            if (requestParameters.reason !== undefined) {
                formParams['reason'] = requestParameters.reason;
            }
            const response = yield this.request({
                path: `/transfer/resend_otp`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Verify Transfer
     */
    verify(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling verify.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/transfer/verify/{reference}`.replace(`{${"reference"}}`, encodeURIComponent(String(requestParameters.reference))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Transfer = Transfer;
