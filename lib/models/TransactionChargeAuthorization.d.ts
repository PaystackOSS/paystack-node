/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransactionChargeAuthorization
 */
export interface TransactionChargeAuthorization {
    /**
     * Customer's email address
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    email: string;
    /**
     * Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
     * @type {number}
     * @memberof TransactionChargeAuthorization
     */
    amount: number;
    /**
     * Valid authorization code to charge
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    authorizationCode: string;
    /**
     * Unique transaction reference. Only -, ., = and alphanumeric characters allowed.
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    reference?: string;
    /**
     * The transaction currency
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    currency?: string;
    /**
     * Stringified JSON object of custom data
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    metadata?: string;
    /**
     * The split code of the transaction split
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    splitCode?: string;
    /**
     * The code for the subaccount that owns the payment
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    subaccount?: string;
    /**
     * A flat fee to charge the subaccount for a transaction.
     * This overrides the split percentage set when the subaccount was created
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    transactionCharge?: string;
    /**
     * The beare of the transaction charge
     * @type {string}
     * @memberof TransactionChargeAuthorization
     */
    bearer?: string;
    /**
     * If you are making a scheduled charge call, it is a good idea to queue them so the processing system does not get overloaded causing transaction processing errors.
     * @type {boolean}
     * @memberof TransactionChargeAuthorization
     */
    queue?: boolean;
}
export declare function TransactionChargeAuthorizationFromJSON(json: any): TransactionChargeAuthorization;
export declare function TransactionChargeAuthorizationFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionChargeAuthorization;
export declare function TransactionChargeAuthorizationToJSON(value?: TransactionChargeAuthorization | null): any;
