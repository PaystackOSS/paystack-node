"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Product = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Product extends runtime_1.BaseAPI {
    /**
     * Delete Product
     */
    _delete(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling _delete.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Product
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime_1.RequiredError('name', 'Required parameter name was null or undefined when calling create.');
            }
            if (requestParameters.description === null || requestParameters.description === undefined) {
                throw new runtime_1.RequiredError('description', 'Required parameter description was null or undefined when calling create.');
            }
            if (requestParameters.price === null || requestParameters.price === undefined) {
                throw new runtime_1.RequiredError('price', 'Required parameter price was null or undefined when calling create.');
            }
            if (requestParameters.currency === null || requestParameters.currency === undefined) {
                throw new runtime_1.RequiredError('currency', 'Required parameter currency was null or undefined when calling create.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.price !== undefined) {
                formParams['price'] = requestParameters.price;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.limited !== undefined) {
                formParams['limited'] = requestParameters.limited;
            }
            if (requestParameters.quantity !== undefined) {
                formParams['quantity'] = requestParameters.quantity;
            }
            const response = yield this.request({
                path: `/product`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Fetch Product
     */
    fetch(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling fetch.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * List Products
     */
    list(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.perPage !== undefined) {
                queryParameters['perPage'] = requestParameters.perPage;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.active !== undefined) {
                queryParameters['active'] = requestParameters.active;
            }
            if (requestParameters.from !== undefined) {
                queryParameters['from'] = requestParameters.from.toISOString();
            }
            if (requestParameters.to !== undefined) {
                queryParameters['to'] = requestParameters.to.toISOString();
            }
            const response = yield this.request({
                path: `/product`,
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Update product
     */
    update(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime_1.RequiredError('id', 'Required parameter id was null or undefined when calling update.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.name !== undefined) {
                formParams['name'] = requestParameters.name;
            }
            if (requestParameters.description !== undefined) {
                formParams['description'] = requestParameters.description;
            }
            if (requestParameters.price !== undefined) {
                formParams['price'] = requestParameters.price;
            }
            if (requestParameters.currency !== undefined) {
                formParams['currency'] = requestParameters.currency;
            }
            if (requestParameters.limited !== undefined) {
                formParams['limited'] = requestParameters.limited;
            }
            if (requestParameters.quantity !== undefined) {
                formParams['quantity'] = requestParameters.quantity;
            }
            const response = yield this.request({
                path: `/product/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Product = Product;
