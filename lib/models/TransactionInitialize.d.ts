/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransactionInitialize
 */
export interface TransactionInitialize {
    /**
     * Customer's email address
     * @type {string}
     * @memberof TransactionInitialize
     */
    email: string;
    /**
     * Amount should be in kobo if currency is NGN, pesewas, if currency is GHS, and cents, if currency is ZAR
     * @type {number}
     * @memberof TransactionInitialize
     */
    amount: number;
    /**
     * The transaction currency
     * @type {string}
     * @memberof TransactionInitialize
     */
    currency?: string;
    /**
     * Unique transaction reference. Only -, ., = and alphanumeric characters allowed.
     * @type {string}
     * @memberof TransactionInitialize
     */
    reference?: string;
    /**
     * Fully qualified url, e.g. https://example.com/ . Use this to override the callback url provided on the dashboard for this transaction
     * @type {string}
     * @memberof TransactionInitialize
     */
    callbackUrl?: string;
    /**
     * If transaction is to create a subscription to a predefined plan, provide plan code here.
     * This would invalidate the value provided in amount
     * @type {string}
     * @memberof TransactionInitialize
     */
    plan?: string;
    /**
     * Number of times to charge customer during subscription to plan
     * @type {number}
     * @memberof TransactionInitialize
     */
    invoiceLimit?: number;
    /**
     * Stringified JSON object of custom data
     * @type {string}
     * @memberof TransactionInitialize
     */
    metadata?: string;
    /**
     * An array of payment channels to control what channels you want to make available to the user to make a payment with
     * @type {Array<string>}
     * @memberof TransactionInitialize
     */
    channels?: Array<string>;
    /**
     * The split code of the transaction split
     * @type {string}
     * @memberof TransactionInitialize
     */
    splitCode?: string;
    /**
     * The code for the subaccount that owns the payment
     * @type {string}
     * @memberof TransactionInitialize
     */
    subaccount?: string;
    /**
     * A flat fee to charge the subaccount for a transaction.
     * This overrides the split percentage set when the subaccount was created
     * @type {string}
     * @memberof TransactionInitialize
     */
    transactionCharge?: string;
    /**
     * The beare of the transaction charge
     * @type {string}
     * @memberof TransactionInitialize
     */
    bearer?: string;
}
export declare function TransactionInitializeFromJSON(json: any): TransactionInitialize;
export declare function TransactionInitializeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionInitialize;
export declare function TransactionInitializeToJSON(value?: TransactionInitialize | null): any;
