/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BaseAPI } from '../runtime';
import { Response } from '../models';
export interface ArchiveRequest {
    id: string;
}
export interface CreateRequest {
    customer: string;
    amount?: number;
    currency?: string;
    due_date?: Date;
    description?: string;
    line_items?: Array<object>;
    tax?: Array<object>;
    send_notification?: Array<object>;
    draft?: Array<object>;
    has_invoice?: Array<object>;
    invoice_number?: number;
    split_code?: string;
}
export interface FetchRequest {
    id: string;
}
export interface FinalizeRequest {
    id: string;
}
export interface ListRequest {
    perPage?: number;
    page?: number;
    customer?: string;
    status?: string;
    currency?: string;
    from?: Date;
    to?: Date;
}
export interface NotifyRequest {
    id: string;
}
export interface UpdateRequest {
    id: string;
    customer?: string;
    amount?: number;
    currency?: string;
    due_date?: Date;
    description?: string;
    line_items?: Array<object>;
    tax?: Array<object>;
    send_notification?: Array<object>;
    draft?: Array<object>;
    has_invoice?: Array<object>;
    invoice_number?: number;
    split_code?: string;
}
export interface VerifyRequest {
    id: string;
}
/**
 *
 */
export declare class PaymentRequest extends BaseAPI {
    /**
     * Archive Payment Request
     */
    archive(requestParameters: ArchiveRequest): Promise<Response>;
    /**
     * Create Payment Request
     */
    create(requestParameters: CreateRequest): Promise<Response>;
    /**
     * Fetch Payment Request
     */
    fetch(requestParameters: FetchRequest): Promise<Response>;
    /**
     * Finalize Payment Request
     */
    finalize(requestParameters: FinalizeRequest): Promise<Response>;
    /**
     * List Payment Request
     */
    list(requestParameters: ListRequest): Promise<Response>;
    /**
     * Send Notification
     */
    notify(requestParameters: NotifyRequest): Promise<Response>;
    /**
     * Payment Request Total
     */
    totals(): Promise<Response>;
    /**
     * Update Payment Request
     */
    update(requestParameters: UpdateRequest): Promise<Response>;
    /**
     * Verify Payment Request
     */
    verify(requestParameters: VerifyRequest): Promise<Response>;
}
