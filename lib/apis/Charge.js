"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Paystack
 * The OpenAPI specification of the Paystack API that merchants and developers can harness to build financial solutions in Africa.
 *
 * The version of the Paystack Node library: 1.0.0
 * Contact: techsupport@paystack.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Charge = void 0;
const runtime_1 = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class Charge extends runtime_1.BaseAPI {
    /**
     * Check pending charge
     */
    check(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling check.');
            }
            const queryParameters = {};
            const response = yield this.request({
                path: `/charge/{reference}`.replace(`{${"reference"}}`, encodeURIComponent(String(requestParameters.reference))),
                method: 'GET',
                query: queryParameters,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Create Charge
     */
    create(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.email !== undefined) {
                formParams['email'] = requestParameters.email;
            }
            if (requestParameters.amount !== undefined) {
                formParams['amount'] = requestParameters.amount;
            }
            if (requestParameters.authorization_code !== undefined) {
                formParams['authorization_code'] = requestParameters.authorization_code;
            }
            if (requestParameters.pin !== undefined) {
                formParams['pin'] = requestParameters.pin;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            if (requestParameters.birthday !== undefined) {
                formParams['birthday'] = requestParameters.birthday;
            }
            if (requestParameters.device_id !== undefined) {
                formParams['device_id'] = requestParameters.device_id;
            }
            if (requestParameters.metadata !== undefined) {
                formParams['metadata'] = requestParameters.metadata;
            }
            if (requestParameters.bank !== undefined) {
                formParams['bank'] = requestParameters.bank;
            }
            if (requestParameters.mobile_money !== undefined) {
                formParams['mobile_money'] = requestParameters.mobile_money;
            }
            if (requestParameters.ussd !== undefined) {
                formParams['ussd'] = requestParameters.ussd;
            }
            if (requestParameters.eft !== undefined) {
                formParams['eft'] = requestParameters.eft;
            }
            const response = yield this.request({
                path: `/charge`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Submit Address
     */
    submitAddress(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.address === null || requestParameters.address === undefined) {
                throw new runtime_1.RequiredError('address', 'Required parameter address was null or undefined when calling submitAddress.');
            }
            if (requestParameters.city === null || requestParameters.city === undefined) {
                throw new runtime_1.RequiredError('city', 'Required parameter city was null or undefined when calling submitAddress.');
            }
            if (requestParameters.state === null || requestParameters.state === undefined) {
                throw new runtime_1.RequiredError('state', 'Required parameter state was null or undefined when calling submitAddress.');
            }
            if (requestParameters.zipcode === null || requestParameters.zipcode === undefined) {
                throw new runtime_1.RequiredError('zipcode', 'Required parameter zipcode was null or undefined when calling submitAddress.');
            }
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling submitAddress.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.address !== undefined) {
                formParams['address'] = requestParameters.address;
            }
            if (requestParameters.city !== undefined) {
                formParams['city'] = requestParameters.city;
            }
            if (requestParameters.state !== undefined) {
                formParams['state'] = requestParameters.state;
            }
            if (requestParameters.zipcode !== undefined) {
                formParams['zipcode'] = requestParameters.zipcode;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/charge/submit_address`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Submit Birthday
     */
    submitBirthday(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.birthday === null || requestParameters.birthday === undefined) {
                throw new runtime_1.RequiredError('birthday', 'Required parameter birthday was null or undefined when calling submitBirthday.');
            }
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling submitBirthday.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.birthday !== undefined) {
                formParams['birthday'] = requestParameters.birthday;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/charge/submit_birthday`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Submit OTP
     */
    submitOtp(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.otp === null || requestParameters.otp === undefined) {
                throw new runtime_1.RequiredError('otp', 'Required parameter otp was null or undefined when calling submitOtp.');
            }
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling submitOtp.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.otp !== undefined) {
                formParams['otp'] = requestParameters.otp;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/charge/submit_otp`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Submit Phone
     */
    submitPhone(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.phone === null || requestParameters.phone === undefined) {
                throw new runtime_1.RequiredError('phone', 'Required parameter phone was null or undefined when calling submitPhone.');
            }
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling submitPhone.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.phone !== undefined) {
                formParams['phone'] = requestParameters.phone;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/charge/submit_phone`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
    /**
     * Submit PIN
     */
    submitPin(requestParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pin === null || requestParameters.pin === undefined) {
                throw new runtime_1.RequiredError('pin', 'Required parameter pin was null or undefined when calling submitPin.');
            }
            if (requestParameters.reference === null || requestParameters.reference === undefined) {
                throw new runtime_1.RequiredError('reference', 'Required parameter reference was null or undefined when calling submitPin.');
            }
            const queryParameters = {};
            let formParams = {};
            if (requestParameters.pin !== undefined) {
                formParams['pin'] = requestParameters.pin;
            }
            if (requestParameters.reference !== undefined) {
                formParams['reference'] = requestParameters.reference;
            }
            const response = yield this.request({
                path: `/charge/submit_pin`,
                method: 'POST',
                query: queryParameters,
                body: formParams,
            });
            return models_1.ResponseFromJSON(response);
        });
    }
}
exports.Charge = Charge;
